<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js设计模式]]></title>
    <url>%2F2018%2F07%2F25%2Fjs%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[爱心飘 取消 单例模式:&emsp;&emsp;单例模式的定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。实现的方法为先判断实例存在与否，如果存在则直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。&emsp;&emsp;适用场景：一个单一对象,只被创建一次。12345678910111213141516171819202122class baozi &#123; constructor(name,hobby) &#123; this.name = name; this.hobby = hobby; &#125; getName() &#123; return this.name + &apos; 被创建啦,他/她的爱好是 &apos; + this.hobby; &#125;&#125;// 代理实现单例模式var proxyBaozi = (function() &#123; var obj = null; return function(name,hobby) &#123; if(!obj) &#123; obj = new baozi(name,hobby); &#125; return obj; &#125;&#125;)();var dabao = proxyBaozi(&apos;dabao&apos;,&apos;eat&apos;)var erbao = proxyBaozi(&apos;erbao&apos;,&apos;sleep&apos;)console.log(dabao===erbao) //true,对象一旦已被创建就不能被更改 策略模式:&emsp;&emsp;策略模式的定义：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换。&emsp;&emsp;适用场景：分离开算法的使用与算法的实现。123456789101112131415var rateObj = &#123; &apos;rmb&apos;:function(money)&#123; return money; &#125;, &apos;dollar&apos;:function(money)&#123; return money*0.1481; &#125;, &apos;pound&apos;:function(money)&#123; return money*0.1122; &#125;&#125;var pay = function(type,money)&#123; return rateObj[type](money);&#125;console.log(pay(&apos;dollar&apos;,1000))//148.10000000000002 代理模式:&emsp;&emsp;代理模式的定义：为一个对象提供一个代用品或占位符，以便控制对它的访问。&emsp;&emsp;适用场景：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建（例：使用虚拟代理实现图片懒加载）123456789101112131415161718var setImg = (function()&#123; var imgEle = document.createElement(&apos;img&apos;); document.body.appendChild(imgEle); return function(src)&#123; imgEle.src = src &#125;&#125;)()var proxyImg = (function()&#123; var img = new Image(); img.onload = function()&#123; setImg(this.src) &#125; return function(src)&#123; setImg(&apos;https://img.zcool.cn/community/016a4158d62fe9a801219c7749a794.jpg@1280w_1l_2o_100sh.jpg&apos;) img.src = src &#125;&#125;)()proxyImg(&apos;https://img.zcool.cn/community/0130f658d62fe9a801219c7781a100.jpg@1280w_1l_2o_100sh.jpg&apos;) 中介者模式:&emsp;&emsp;中介者模式的定义：通过一个中介者对象，其他所有的相关对象都通过该中介者对象来通信，而不是相互引用，当其中的一个对象发生改变时，只需要通知中介者对象即可。&emsp;&emsp;中介者模式适用的场景：通过中介者转发处理这些事件，实现各个事件间的解耦，只需要维护中介者对象。12345678910111213141516171819202122var intermediary = (function() &#123; type = document.getElementById(&apos;type&apos;); num = document.getElementById(&apos;num&apos;); return &#123; changed: function(obj) &#123; switch(obj) &#123; case type: console.log(1) break; case num: console.log(2) break; &#125; &#125; &#125;&#125;)();type.onchange = function() &#123; intermediary.changed(this);&#125;;num.onchange = function() &#123; intermediary.changed(this);&#125;;]]></content>
  </entry>
  <entry>
    <title><![CDATA[雪花测试]]></title>
    <url>%2F2018%2F07%2F24%2F%E9%9B%AA%E8%8A%B1%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[下雪 取消]]></content>
  </entry>
  <entry>
    <title><![CDATA[图片测试]]></title>
    <url>%2F2018%2F07%2F23%2F%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
</search>
